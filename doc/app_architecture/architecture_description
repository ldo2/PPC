Архитектура калькулятора PPC.

Приложение построено на клиент-серверной модели.

Клиентское приложение устанавливает соединение с сервером. 
После этого на сервере инициализируются структуры данных 
клиентского соединения (таблицы пользовательских функций и т.д.)
Клиентское приложение формирует запросы к серверу и пересылает их 
по определенному протоколу, который обеспечивает отправку строк 
функционального языка выражений, управление их вычисления и 
получение результата ресчетов.

Серверное приложение выполняется несколькими потоками.
Главный поток (Main Thread) прослушивает порт, на котором 
работает сервер, и ожидает соединений от клиентских приложений.
После получения соединения главный поток передает его 
обработку одному из свободных потоков, обрабатывающих соединения, 
собранных в пуле (Connection Pool). Этот поток обслуживает 
полученное соединение посредством обращения в потоку ядра 
системы (Kernel Thread), который вычисляет функциональные 
выражения.

Протокол общения клиента и сервера должен поддерживать возможность 
реализации следующих возможностей:
- отправка на сервер вуражения для вычисления
- получение от сервера результата вычисления
- отправка команды отмены вычисления
- получение информации о состоянии вычисления

Рассмотрим подробнее обслуживание соединения. 
При обработке запроса сервер, анализируя протокол, выделяет 
выражение для вычисления, после чего подает его на вход
стековому компилятору формул, который осуществляет преобразование 
строкового представления формулы в абстрактное дерево вызова функций 
(то есть в дерево содержащее имена функций и иерархию их вложенности).
После этого оно передается на вычисление в поток ядра 
системы (Kernel Thread). Затем результат обработки дерева 
компануется в ответ (respond), который отправляется клиентскому 
приложению.

Функционирование ядра системы.

Ядро системы (Kernel) состоит из следующих частей:
1) вычислительного ядра (Core) - часть программы непосредственно 
выполняющая расчеты и вычисления, которая фактически выполняется
в потоке ядра (Kernel Thread)
2) планировщика (Scheduler) - часть программы осуществляющая 
планирование порядка вычислений и выбирающая текущую задачу 
для выполнения из таблизы задач, вызываемая периодически
3) модуля управления памятью (Memory Manager) - данный модуль 
управляет выделением динамической памяти, возвратом 
неиспользуемой памяти ОС, распределением памяти между задачами.
4) модуля управления подключаемыми модулями (Module Manager)
5) набора модулей (Module) реализующих функции над множествами 
объектов вычисления.

Также ядро включает следующие наборы данных:
1) таблица задач (Tasks Table) - набор задач (деревьев выражений), 
которые ядро должно обработать
2) множества функций
  a) стандартное множество функций (STD Functions) - набор функций 
  определяемый подключаемыми модулями, существует для каждого 
  клиентского соединения
  b) множество пользовательских функций (Users Functions) - хэш 
  множеств функций сопоставляющий каждому клиентскому соединению 
  собственное множество функций (ввод, вывод каждого расчета, 
  а также собственные определения)






